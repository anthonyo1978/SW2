name: CI/CD Pipeline

on:
  push:
    branches: [ main, services ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linter
        run: npm run lint
        
      - name: Run type check
        run: npm run typecheck
        
      - name: Run tests
        run: npm run test:run
        
      - name: Build application
        run: npm run build
        
  # Database validation (optional but recommended)
  database-check:
    name: Database Schema Validation
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'database') || contains(github.event.head_commit.message, 'migration')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Validate database scripts
        run: |
          echo "üîç Checking for SQL syntax issues..."
          # Check if SQL files have basic syntax
          for file in scripts/*.sql; do
            if [ -f "$file" ]; then
              echo "Checking $file..."
              # Basic SQL syntax check (you could enhance this)
              if ! grep -q ";" "$file"; then
                echo "‚ö†Ô∏è  Warning: $file might be missing semicolons"
              fi
            fi
          done
          echo "‚úÖ Database script validation complete"

  # Security check
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level moderate
        
      - name: Check for secrets in code
        run: |
          echo "üîç Checking for potential secrets..."
          # Check for common secret patterns
          if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" -E "(password|secret|key|token).*=.*['\"][^'\"]{10,}" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ö†Ô∏è  Potential secrets found in code!"
            exit 1
          else
            echo "‚úÖ No obvious secrets found in code"
          fi

  # Deployment preview (for Vercel)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [test, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        if: github.event_name == 'pull_request'
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
  # Production deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}